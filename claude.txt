/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   error_message_exec.c                               :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmillot <tmillot@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/12 13:44:12 by tmillot           #+#    #+#             */
/*   Updated: 2025/04/30 11:23:31 by tmillot          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../core/minishell.h"

void	command_not_found(char *cmd)
{
	ft_putstr_fd("Minishell:~$ ", 2);
	ft_putstr_fd(cmd, 2);
	ft_putstr_fd(": Command not found\n", 2);
}

void	no_such_file_or_directory(char *cmd)
{
	ft_putstr_fd("Minishell:~$ ", 2);
	ft_putstr_fd(cmd, 2);
	ft_putstr_fd(": No such file or directory\n", 2);
}

void	permission_denied(char *file)
{
	ft_putstr_fd("Minishell:~$ ", 2);
	ft_putstr_fd(file, 2);
	ft_putstr_fd(": Permission denied\n", 2);
}

void	error_message(char *str)
{
	ft_putstr_fd("Minishell:~$ ", 2);
	perror(str);
}

void	is_a_directory(char *str)
{
	ft_putstr_fd("Minishell:~$ ", 2);
	ft_putstr_fd(str, 2);
	ft_putstr_fd(": Is a directory\n", 2);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   executing.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmillot <tmillot@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/04 22:16:30 by thomas            #+#    #+#             */
/*   Updated: 2025/05/26 12:42:37 by tmillot          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../core/minishell.h"

int	is_built_in(char *str)
{
	if (ft_strcmp(str, "echo") == 0)
		return (SUCCESS);
	else if (ft_strcmp(str, "cd") == 0)
		return (SUCCESS);
	else if (ft_strcmp(str, "env") == 0)
		return (SUCCESS);
	else if (ft_strcmp(str, "exit") == 0)
		return (SUCCESS);
	else if (ft_strcmp(str, "export") == 0)
		return (SUCCESS);
	else if (ft_strcmp(str, "pwd") == 0)
		return (SUCCESS);
	else if (ft_strcmp(str, "unset") == 0)
		return (SUCCESS);
	else
		return (FAIL);
}

static void	find_built_in(t_cmd *cmd)
{
	t_cmd	*current;

	current = cmd;
	while (current != NULL)
	{
		if (is_built_in(current->args[0]) == SUCCESS)
			current->builtin = true;
		else
			current->builtin = false;
		current = current->next;
	}
}

int	wait_children(int status, t_cmd *cmd)
{
	t_cmd	*current;
	int		last_status;
	int		cur_status;

	current = cmd;
	last_status = status;
	cur_status = 0;
	while (current != NULL)
	{
		waitpid(current->pid, &cur_status, 0);
		if (WIFEXITED(cur_status))
			last_status = WEXITSTATUS(cur_status);
		else if (WIFSIGNALED(cur_status))
			last_status = 128 + WTERMSIG(cur_status);
		current = current->next;
	}
	free_t_cmd_nowhere(cmd);
	return (last_status % 255);
}

int	is_special_build_in_parent(char **cmd)
{
	if (ft_strncmp(cmd[0], "cd", 3) == 0
		|| ft_strncmp(cmd[0], "export", 7) == 0
		|| ft_strncmp(cmd[0], "unset", 6) == 0
		|| ft_strncmp(cmd[0], "exit", 5) == 0)
		return (0);
	return (1);
}

int	ft_exec(t_cmd *cmd, t_env **env, int last_status)
{
	t_cmd	*current;
	int		pipe_fd[2];
	int		prev_fd;

	find_built_in(cmd);
	expand_and_trim_cmd(cmd, env, last_status);
	prev_fd = STDIN_FILENO;
	current = cmd;
	if (current->next == NULL && is_special_build_in_parent(current->args) == 0)
		return (exec_builtin(current, env));
	while (current != NULL)
	{
		if (pipe(pipe_fd) == -1)
			return (perror("pipe error"), EXIT_FAILURE);
		last_status = ft_process(current, env, pipe_fd, prev_fd);
		close(pipe_fd[1]);
		if (prev_fd != 0)
			close(prev_fd);
		if (current->next != NULL)
			prev_fd = pipe_fd[0];
		else
			close(pipe_fd[0]);
		current = current->next;
	}
	return (wait_and_free(last_status, cmd));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   exit_free_exec.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmillot <tmillot@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/14 17:00:39 by tmillot           #+#    #+#             */
/*   Updated: 2025/05/29 10:44:59 by tmillot          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../core/minishell.h"

void	free_tab_char(char **tab)
{
	int	i;

	i = 0;
	if (tab == NULL)
		return ;
	while (tab[i] != NULL)
	{
		if (tab[i])
			free(tab[i]);
		i++;
	}
	free(tab);
}

void	free_t_redir(t_redir *list)
{
	t_redir		*temp;

	while (list != NULL)
	{
		if (list->type == HEREDOC)
		{
			if (unlink(list->file) == -1)
				perror("unlink error");
			free(list->file);
		}
		else
		{
			if (list->file != NULL)
				free(list->file);
		}
		temp = list;
		list = list->next;
		free(temp);
	}
}

void	free_path(char *path_cmd)
{
	if (path_cmd != NULL)
		free(path_cmd);
}

int	wait_and_free(int status, t_cmd *cmd)
{
	int	last_status;

	last_status = 0;
	if (cmd == NULL)
		return (status);
	if (cmd != NULL)
	{
		last_status = wait_children(status, cmd);
		free_t_cmd(cmd);
	}
	return (last_status);
}

void	ft_exit_child(int code_status, char *path_cmd, char **envp)
{
	if (path_cmd != NULL)
		free_path(path_cmd);
	if (envp != NULL)
		free_tab_char(envp);
	exit(code_status);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   expand_trim_quotes.c                               :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmillot <tmillot@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/10 12:15:48 by tmillot           #+#    #+#             */
/*   Updated: 2025/05/29 10:27:35 by tmillot          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../core/minishell.h"

void	expand_trim_redir(t_redir *redirection, t_env **env, int last_status)
{
	t_redir		*current;
	int			quote;
	int			i;

	current = redirection;
	quote = NO_QUOTE;
	while (current != NULL)
	{
		i = 0;
		while (current->file[i] != '\0')
		{
			check_expand_quote(&quote, current->file[i]);
			if (current->file[i] == '$' && quote != S_QUOTE)
				expand_arg(&current->file, env, last_status, &i);
			i++;
		}
		find_and_trim_quote(&current->file);
		current = current->next;
	}
}

void	expand_and_trim_cmd(t_cmd *cmd, t_env **env, int last_status)
{
	t_cmd	*current;

	current = cmd;
	handling_dollars(cmd, env, last_status);
	trim_quotes(cmd);
	while (current != NULL)
	{
		if (current->infile != NULL)
			expand_trim_redir(current->infile, env, last_status);
		if (current->outfile != NULL)
			expand_trim_redir(current->outfile, env, last_status);
		current = current->next;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   find_command.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmillot <tmillot@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/12 18:55:42 by tmillot           #+#    #+#             */
/*   Updated: 2025/05/26 11:57:53 by tmillot          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../core/minishell.h"

static char	*path_of_env(t_env **env)
{
	t_env	*current;
	char	*path;

	current = *env;
	path = NULL;
	while (current != NULL)
	{
		if (ft_strcmp(current->key, "PATH") == 0)
		{
			path = ft_strdup(current->value);
			return (path);
		}
		current = current->next;
	}
	return (path);
}

char	*find_cmd_path(t_env **env, t_cmd *cmd)
{
	int		i;
	char	*path_env;
	char	*res;
	char	*cmd_slash;
	char	**possible_path;

	i = -1;
	path_env = path_of_env(env);
	cmd_slash = ft_strjoin("/", cmd->args[0]);
	if (access(cmd->args[0], F_OK | X_OK) == 0)
		return (free(path_env), free(cmd_slash), ft_strdup(cmd->args[0]));
	if (path_env == NULL)
		return (free(path_env), free(cmd_slash),
			command_not_found(cmd->args[0]), NULL);
	possible_path = ft_split(path_env, ':');
	while (possible_path[++i] != NULL)
	{
		res = ft_strjoin(possible_path[i], cmd_slash);
		if (access(res, F_OK | X_OK) == 0)
			return (free(cmd_slash), free(path_env),
				clean_split(possible_path), res);
		free(res);
	}
	command_not_found(cmd->args[0]);
	return (free(cmd_slash), free(path_env), clean_split(possible_path), NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   free_shell.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmillot <tmillot@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/23 04:01:30 by tmillot           #+#    #+#             */
/*   Updated: 2025/05/29 10:43:36 by tmillot          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../core/minishell.h"

void	free_env(t_env **env)
{
	t_env	*tmp;

	while (*env)
	{
		tmp = *env;
		*env = (*env)->next;
		if (tmp->key)
			free(tmp->key);
		if (tmp->value)
			free(tmp->value);
		free(tmp);
	}
}

void	free_t_cmd(t_cmd *cmd)
{
	t_cmd	*tmp;

	tmp = NULL;
	while (cmd != NULL)
	{
		tmp = cmd;
		free_tab_char(cmd->args);
		if (cmd->infile != NULL)
			free_t_redir(cmd->infile);
		if (cmd->outfile != NULL)
			free_t_redir(cmd->outfile);
		cmd = cmd->next;
		free(tmp);
	}
}

void	free_t_cmd_nowhere(t_cmd *cmd)
{
	t_cmd	*tmp;

	tmp = cmd;
	while (tmp != NULL)
		tmp = tmp->prev;
	free_t_cmd(tmp);
}

void	safe_free_exec(t_cmd *cmd, char **envp, char *path)
{
	free_t_cmd_nowhere(cmd);
	free_tab_char(envp);
	free_path(path);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   handle_env_exec.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmillot <tmillot@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/13 12:10:09 by tmillot           #+#    #+#             */
/*   Updated: 2025/05/23 19:28:25 by tmillot          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../core/minishell.h"

static int	size_struct_env(t_env **env)
{
	int		count;
	t_env	*current;

	current = *env;
	count = 0;
	while (current != NULL)
	{
		count++;
		current = current->next;
	}
	return (count);
}

static char	*join_key_and_value(char *key, char *value)
{
	char	*res;
	int		i;
	int		j;

	res = malloc((ft_strlen(key) + ft_strlen(value) + 2) * sizeof(char));
	i = 0;
	j = 0;
	while (key[i] != '\0')
	{
		res[i] = key[i];
		i++;
	}
	res[i++] = '=';
	if (value != NULL)
		while (value[j] != '\0')
			res[i++] = value[j++];
	res[i] = '\0';
	return (res);
}

char	**env_tab_char(t_env **env, char *path_cmd)
{
	int		size;
	char	**tab_char;
	int		i;
	t_env	*current;

	if (path_cmd == NULL)
		return (NULL);
	size = size_struct_env(env);
	tab_char = malloc((size + 1) * sizeof(char *));
	i = 0;
	current = *env;
	while (current != NULL)
	{
		tab_char[i] = join_key_and_value(current->key, current->value);
		current = current->next;
		i++;
	}
	tab_char[i] = NULL;
	return (tab_char);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   handling_dollars.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmillot <tmillot@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/05 15:25:30 by tmillot           #+#    #+#             */
/*   Updated: 2025/05/23 15:06:35 by tmillot          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../core/minishell.h"

int	check_expand_quote(int *quote, char c)
{
	if (c == '\'' && *quote != D_QUOTE)
		return (*quote = S_QUOTE, 1);
	else if (c == '\"' && *quote != S_QUOTE)
		return (*quote = D_QUOTE, 1);
	return (0);
}

static int	sep_var_name(char c)
{
	if (c == ' ' || c == '.' || c == '+' || c == '-' || c == '^' || c == ','
		|| c == '*' || c == '/' || c == '%' || c == '=' || c == '\"'
		|| c == '\0')
		return (0);
	return (1);
}

static char	*get_value_env(char *arg, t_env **env, int *index)
{
	char	*value;
	char	*name;
	int		start;
	t_env	*current;

	start = *index + 1;
	name = NULL;
	current = *env;
	value = ft_strdup("");
	if (ft_isdigit(arg[start]) == 1)
		return ((*index) += 2, value);
	while (sep_var_name(arg[*index]) == 1 && arg[*index] != '\0')
		*index += 1;
	name = ft_substr(arg, start, (*index - start));
	while (current != NULL)
	{
		if (ft_strcmp(name, current->key) == 0)
		{
			free(value);
			value = ft_strdup(current->value);
			break ;
		}
		current = current->next;
	}
	return (free(name), value);
}

void	expand_arg(char **arg, t_env **env, int last_status, int *index)
{
	char	*before_dollar;
	char	*str_to_expand;
	char	*end_str;
	char	*first_join;

	before_dollar = NULL;
	str_to_expand = ft_strdup("");
	end_str = NULL;
	before_dollar = ft_substr((*arg), 0, *index);
	if ((*arg)[*index + 1] == '?')
	{
		str_to_expand = ft_itoa(last_status);
		*index += 2;
	}
	else if (sep_var_name((*arg)[*index + 1]) == 1)
		str_to_expand = get_value_env((*arg), env, index);
	end_str = ft_substr((*arg), *index, (ft_strlen((*arg)) - *index));
	first_join = ft_strjoin(before_dollar, str_to_expand);
	free((*arg));
	(*arg) = ft_strjoin(first_join, end_str);
	free(before_dollar);
	free(str_to_expand);
	free(end_str);
	free(first_join);
}

void	handling_dollars(t_cmd *cmd, t_env **env, int last_status)
{
	t_cmd		*current;
	int			quote;
	int			i;
	int			j;

	current = cmd;
	while (current != NULL)
	{
		i = 0;
		while (current->args[i] != NULL)
		{
			j = 0;
			quote = NO_QUOTE;
			while (current->args[i][j] != '\0')
			{
				check_expand_quote(&quote, current->args[i][j]);
				if (current->args[i][j] == '$' && quote != S_QUOTE)
					expand_arg(&current->args[i], env, last_status, &j);
				j++;
			}
			i++;
		}
		current = current->next;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   open_redirection.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmillot <tmillot@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/13 16:25:36 by tmillot           #+#    #+#             */
/*   Updated: 2025/05/20 21:35:54 by tmillot          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../core/minishell.h"

static int	open_infile(char *file)
{
	int	fd;

	fd = open(file, O_RDONLY);
	if (fd == -1)
	{
		if (access(file, R_OK) == -1)
			permission_denied(file);
		else if (access(file, F_OK) == -1)
			no_such_file_or_directory(file);
		else
			error_message(file);
	}
	return (fd);
}

int	last_infile(t_cmd *cmd)
{
	int			fd;
	int			prev;
	t_redir		*infile;

	infile = cmd->infile;
	prev = -1;
	while (infile)
	{
		fd = open_infile(infile->file);
		if (prev != -1)
			close(prev);
		if (fd == -1)
			break ;
		prev = fd;
		infile = infile->next;
	}
	return (fd);
}

static int	open_outfile(char *file, t_token_type mode)
{
	int	fd;

	if (mode == REDIRECT_APPEND)
		fd = open(file, O_WRONLY | O_CREAT | O_APPEND, 0644);
	else
		fd = open(file, O_WRONLY | O_CREAT | O_TRUNC, 0644);
	if (fd == -1)
	{
		if (access(file, W_OK) == -1)
			permission_denied(file);
		else
			error_message(file);
	}
	return (fd);
}

int	last_outfile(t_cmd *cmd)
{
	int			fd;
	int			prev;
	t_redir		*outfile;

	outfile = cmd->outfile;
	prev = -1;
	while (outfile)
	{
		fd = open_outfile(outfile->file, outfile->type);
		if (prev != -1)
			close(prev);
		if (fd == -1)
			break ;
		prev = fd;
		outfile = outfile->next;
	}
	return (fd);
}

/* attention le break ne suffit pas ici *//* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   processus.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmillot <tmillot@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/12 18:58:31 by tmillot           #+#    #+#             */
/*   Updated: 2025/05/29 10:44:35 by tmillot          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../core/minishell.h"

static int	run_executable(t_cmd *cmd, char **envp)
{
	struct stat	data;

	if (access(cmd->args[0], F_OK) == -1)
		return (command_not_found(cmd->args[0]), 127);
	if (access(cmd->args[0], X_OK) == -1)
		return (permission_denied(cmd->args[0]), 126);
	if (stat(cmd->args[0], &data) != 0)
		return (perror("stat"), CODE_FAIL);
	if (S_ISREG(data.st_mode) == 0)
		return (is_a_directory(cmd->args[0]), 126);
	if (execve(*cmd->args, cmd->args, envp) == -1)
		perror("execve");
	return (CODE_FAIL);
}

int	exec_builtin(t_cmd *cmd, t_env **env)
{
	if (ft_strcmp(cmd->args[0], "echo") == 0)
		return (ft_echo(cmd));
	else if (ft_strcmp(cmd->args[0], "pwd") == 0)
		return (ft_pwd());
	else if (ft_strcmp(cmd->args[0], "env") == 0)
		return (ft_env(env, cmd));
	else if (ft_strcmp(cmd->args[0], "cd") == 0)
		return (ft_cd(env, cmd));
	else if (ft_strcmp(cmd->args[0], "export") == 0)
		return (ft_export(env, cmd));
	else if (ft_strcmp(cmd->args[0], "unset") == 0)
		return (ft_unset(cmd, env));
	else if (ft_strcmp(cmd->args[0], "exit") == 0)
		return (ft_exit(cmd, env, 0));
	return (1);
}

void	child_process(t_env **env, t_cmd *cmd, char **envp, char *path)
{
	struct stat		data;
	int				value_exit;

	setup_signal(0);
	if (*cmd->args[0] == '.' || *cmd->args[0] == '/')
		value_exit = run_executable(cmd, envp);
	else if (cmd->builtin == true)
		value_exit = exec_builtin(cmd, env);
	else if (path == NULL)
		value_exit = 127;
	else if (stat(path, &data) != 0)
		perror("stat");
	else if (S_ISREG(data.st_mode) == 0)
	{
		is_a_directory(cmd->args[0]);
		value_exit = 126;
	}
	else if (execve(path, cmd->args, envp) == -1)
	{
		perror("execve");
		value_exit = CODE_FAIL;
	}
	(free_env(env), free_t_cmd_nowhere(cmd));
	ft_exit_child(value_exit, path, envp);
}

int	ft_process(t_cmd *cmd, t_env **env, int *pipe_fd, int prev_fd)
{
	char	*path_cmd;
	int		redir;
	char	**envp;

	if (env == NULL && cmd->args[0] != NULL && is_built_in(*cmd->args) == FAIL)
		return (no_such_file_or_directory(cmd->args[0]), 127);
	path_cmd = NULL;
	envp = NULL;
	if (cmd->args[0] != NULL && *cmd->args[0] != '.'
		&& *cmd->args[0] != '/' && is_built_in(*cmd->args) == FAIL)
	{
		path_cmd = find_cmd_path(env, cmd);
		envp = env_tab_char(env, path_cmd);
	}
	cmd->pid = fork();
	if (cmd->pid == -1)
		return (perror("fork"), CODE_FAIL);
	if (cmd->pid != 0)
		return (safe_free_exec(cmd, envp, path_cmd), CODE_SUCCESS);
	redir = redirect_management(cmd, pipe_fd, prev_fd);
	if (redir == CODE_SUCCESS && cmd->args[0])
		child_process(env, cmd, envp, path_cmd);
	(free_env(env), free_t_cmd_nowhere(cmd));
	ft_exit_child(redir, path_cmd, envp);
	return (CODE_SUCCESS);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   redirect_management.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmillot <tmillot@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/13 14:00:58 by tmillot           #+#    #+#             */
/*   Updated: 2025/05/23 03:56:04 by tmillot          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../core/minishell.h"

static int	management_infile(t_cmd *cmd, int prev_fd)
{
	int	in_fd;

	if (cmd->infile == NULL && prev_fd == 0)
		return (CODE_SUCCESS);
	if (cmd->infile == NULL && prev_fd != 0)
		return (dup2(prev_fd, 0), close(prev_fd), CODE_SUCCESS);
	if (prev_fd != 0)
		close(prev_fd);
	in_fd = last_infile(cmd);
	if (in_fd == -1)
		return (CODE_FAIL);
	return (dup2(in_fd, 0), close(in_fd), CODE_SUCCESS);
}

static int	management_outfile(t_cmd *cmd, int *pipe_fd)
{
	int	out_fd;

	if (cmd->outfile == NULL && cmd->next == NULL)
		return (CODE_SUCCESS);
	if (cmd->outfile == NULL)
		return (dup2(pipe_fd[1], 1), CODE_SUCCESS);
	out_fd = last_outfile(cmd);
	if (out_fd == -1)
		return (dup2(pipe_fd[1], 1), CODE_FAIL);
	return (dup2(out_fd, 1), close(out_fd), CODE_SUCCESS);
}

int	redirect_management(t_cmd *cmd, int *pipe_fd, int prev_fd)
{
	if (management_infile(cmd, prev_fd) == CODE_FAIL)
		return (close(pipe_fd[0]), close(pipe_fd[1]), CODE_FAIL);
	else if (management_outfile(cmd, pipe_fd) == CODE_FAIL)
		return (close(pipe_fd[0]), close(pipe_fd[1]), CODE_FAIL);
	return (close(pipe_fd[0]), close(pipe_fd[1]), CODE_SUCCESS);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   signals_handler.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmillot <tmillot@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/27 13:16:40 by tmillot           #+#    #+#             */
/*   Updated: 2025/05/29 10:30:12 by tmillot          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../core/minishell.h"

volatile bool	g_signal = false;

void	signal_handler(int signum)
{
	printf("\n");
	rl_on_new_line();
	rl_replace_line("", 0);
	rl_redisplay();
	if (signum == SIGINT)
		g_signal = true;
}

void	signal_handler_here_doc(int signum)
{
	if (signum == SIGINT)
	{
		g_signal = true;
		write(1, "\n", 1);
	}
}

void	setup_signal_heredoc(void)
{
	struct sigaction	sa_sigint;
	struct sigaction	sa_sigquit;

	sa_sigint.sa_handler = signal_handler_here_doc;
	sigemptyset(&sa_sigint.sa_mask);
	sa_sigint.sa_flags = 0;
	sa_sigquit.sa_handler = SIG_IGN;
	sigemptyset(&sa_sigquit.sa_mask);
	sa_sigquit.sa_flags = 0;
	sigaction(SIGINT, &sa_sigint, NULL);
	sigaction(SIGQUIT, &sa_sigquit, NULL);
}

void	setup_signal(int sig)
{
	static struct sigaction	sa_sigint;
	static struct sigaction	sa_sigquit;

	sa_sigint.sa_flags = SA_RESTART;
	sa_sigquit.sa_flags = SA_RESTART;
	sigemptyset(&sa_sigint.sa_mask);
	sigemptyset(&sa_sigquit.sa_mask);
	sa_sigint.sa_handler = &signal_handler;
	if (sig == 1)
		sa_sigquit.sa_handler = SIG_IGN;
	else
		sa_sigquit.sa_handler = SIG_DFL;
	sigaction(SIGINT, &sa_sigint, NULL);
	sigaction(SIGQUIT, &sa_sigquit, NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   speciale_built_in.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmillot <tmillot@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/19 18:06:03 by tmillot           #+#    #+#             */
/*   Updated: 2025/05/23 04:08:02 by tmillot          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../core/minishell.h"

int	is_special_built_in(char *cmd)
{
	if (ft_strcmp(cmd, "cd") == 0)
		return (SUCCESS);
	else if (ft_strcmp(cmd, "export") == 0)
		return (SUCCESS);
	else if (ft_strcmp(cmd, "unset") == 0)
		return (SUCCESS);
	else if (ft_strcmp(cmd, "exit") == 0)
		return (SUCCESS);
	else
		return (FAIL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   trim_quote.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmillot <tmillot@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/10 07:06:39 by tmillot           #+#    #+#             */
/*   Updated: 2025/05/12 17:53:51 by tmillot          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../core/minishell.h"

int	check_status_quote(int *quote, char c)
{
	if (c == '\'' && *quote == NO_QUOTE)
		return (*quote = S_QUOTE, 1);
	else if (c == '\'' && *quote == S_QUOTE)
		return (*quote = NO_QUOTE, 1);
	else if (c == '\"' && *quote == NO_QUOTE)
		return (*quote = D_QUOTE, 1);
	else if (c == '\"' && *quote == D_QUOTE)
		return (*quote = NO_QUOTE, 1);
	return (0);
}

void	change_str(char *arg, int len)
{
	int	i;

	i = 0;
	while (arg[i + len] != '\0')
	{
		arg[i] = arg[i + len];
		i++;
	}
	arg[i] = '\0';
}

void	find_and_trim_quote(char **arg)
{
	int	index;
	int	quote;

	index = 0;
	quote = NO_QUOTE;
	while ((*arg)[index] != '\0')
	{
		check_status_quote(&quote, (*arg)[index]);
		if (((*arg)[index] == '\"' && quote != S_QUOTE))
			change_str((*arg) + index--, 1);
		else if ((*arg)[index] == '\'' && quote != D_QUOTE)
			change_str((*arg) + index--, 1);
		index++;
	}
}

void	trim_quotes(t_cmd *cmd)
{
	t_cmd	*current;
	int		i;

	current = cmd;
	while (current != NULL)
	{
		i = 0;
		while (current->args[i] != NULL)
		{
			find_and_trim_quote(&current->args[i]);
			i++;
		}
		current = current->next;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   toto_t_fill.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmillot <tmillot@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/17 10:48:05 by tmillot           #+#    #+#             */
/*   Updated: 2025/05/29 11:00:05 by tmillot          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../core/minishell.h"

#include <stdio.h>

static const char *get_redir_type_name(t_token_type type)
{
	if (type == REDIRECT_IN)
		return "<";
	else if (type == REDIRECT_OUT)
		return ">";
	else if (type == REDIRECT_APPEND)
		return ">>";
	else if (type == HEREDOC)
		return "<<";
	else
		return "UNKNOWN";
}

void	print_cmd_debug(t_cmd *cmd)
{
	int i = 0;
	int cmd_num = 1;

	while (cmd)
	{
		printf("========== COMMAND %d ==========\n", cmd_num++);

		// Print args
		printf("ARGS:\n");
		if (cmd->args)
		{
			while (cmd->args[i])
			{
				printf("  args[%d] = [%s]\n", i, cmd->args[i]);
				i++;
			}
		}
		else
			printf("  (null)\n");

		// Print input redirections
		printf("INFILES:\n");
		t_redir *in = cmd->infile;
		while (in)
		{
			printf("  type: %s\tfile: [%s]\n", get_redir_type_name(in->type), in->file);
			in = in->next;
		}

		// Print output redirections
		printf("OUTFILES:\n");
		t_redir *out = cmd->outfile;
		while (out)
		{
			printf("  type: %s\tfile: [%s]\n", get_redir_type_name(out->type), out->file);
			out = out->next;
		}

		// Print builtin flag
		printf("BUILTIN: %s\n", cmd->builtin ? "true" : "false");

		printf("\n");
		cmd = cmd->next;
		i = 0;
	}
}

void	debug_parse_redir(t_parse_redir *redir)
{
	int i;
	int node_num = 0;
	t_parse_redir *lst;

	lst = redir;
	while (lst)
	{
		printf("🔗 Node %d:\n", node_num);
		if (lst->line == NULL)
		{
			printf("  line: (NULL)\n");
		}
		else
		{
			i = 0;
			while (lst->line[i])
			{
				printf("  line[%d] = \"%s\"\n", i, lst->line[i]);
				i++;
			}
		}
		lst = lst->next;
		node_num++;
	}
}

void add_back_t_redir(t_redir **redirection, char *file, t_token_type type)
{
	t_redir		*new;
	t_redir		*current;

	new = malloc(sizeof(t_redir));
	if (type == HEREDOC)
		new->file = get_here_doc(file);
	else
		new->file = ft_strdup(file);
	new->type = type;
	new->next = NULL;
	current = *redirection;
	if (*redirection == NULL)
		*redirection = new;
	else
	{
		while (current->next != NULL)
			current = current->next;
		current->next = new;
	}
}

char	**list_to_array_char(t_list *lst)
{
	int		size;
	char	**tab;
	int		i;

	size = ft_lstsize(lst);
	i = 0;
	tab = malloc(sizeof(char *) * (size + 1));
	while (lst != NULL)
	{
		tab[i++] = lst->content;
		lst = lst->next;
	}
	tab[i] = NULL;
	return (tab);
}

void	fill_t_cmd(t_parse_redir *redir, t_cmd *cmd)
{
	int				i;
	t_parse_redir	*current_redir;
	t_cmd			*current_cmd;

	current_redir = redir;
	current_cmd = cmd;
	debug_parse_redir(current_redir);
	while (current_redir != NULL)
	{
		i = 0;
		if (ft_strcmp_minishell(current_redir->line[0], "|") == 1)
			current_redir = current_redir->next;
		while (current_redir->line[i] != NULL)
		{
			if (ft_strcmp_minishell(current_redir->line[i], "<") == 1)
			{
				add_back_t_redir(&current_cmd->infile, current_redir->line[i + 1], REDIRECT_IN);
				i += 1;
			}
			else if (ft_strcmp_minishell(current_redir->line[i], ">") == 1)
			{
				add_back_t_redir(&current_cmd->outfile, current_redir->line[i + 1], REDIRECT_OUT);
				i += 1;
			}
			else if (ft_strcmp_minishell(current_redir->line[i], "<<") == 1)
			{
				add_back_t_redir(&current_cmd->infile, current_redir->line[i + 1], HEREDOC);
				i += 1;
			}
			else if (ft_strcmp_minishell(current_redir->line[i], ">>") == 1)
			{
				add_back_t_redir(&current_cmd->outfile, current_redir->line[i + 1], REDIRECT_APPEND);
				i += 1;
			}
			else if (ft_strcmp_minishell(current_redir->line[i], "") == 0)
			{
				current_cmd->args = ft_split(current_redir->line[i], ' ');
			}
			i++;
		}
		if (current_redir->next != NULL)
		{
			current_cmd->next = init_cmd();
			current_cmd->next->prev = current_cmd;
			current_cmd = current_cmd->next;
		}
		else
			current_cmd->next = NULL;
		current_redir = current_redir->next;
	}
	// printf("fin du t_fill\n");
	// print_cmd_debug(cmd);
}
